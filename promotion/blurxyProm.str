static{
  //constraint : (n-2m)%ts = 0
  /*
  int n = 16;
  int m = 4; //amount of levels
  int ts = 4; //tile size of last level
  */
  
  int n = 1<<20;
  int m = 8;
  int ts = 16;
  

  //(m+1, ts+2m)
  int MAXTS = 128;
  int NOOUT = MAXTS-1;
  int REDUNDANT = MAXTS;
  int UNREDUNDANT = MAXTS;
  int[32][MAXTS] InPromedComp;  //Iterations have been promoted to previous filter
  int[32][MAXTS] OutPromedComp; //Iterations promoted from success filter
  int NRedun = 2;
  int[9] IORate = {0, 4, 2, 2, 2, 2, 2, 0, 0};  //should be constant
  int[128] redcnt;
  int upstat = (n-2*m)/ts;
  
  init{
    
    //init Promoed Scheme. 128=NONE
    for(int i = 0; i <= m; i++){
      for(int j = 0; j <= ts+2*m; j++){
        InPromedComp[i][j] = UNREDUNDANT;
      }
    }
    for(int i = m-1; i > 0; i--){
      redcnt[i] = (m-i-1)*2;
    }

    //HERE : insert code to define InPromedComp
    InPromedComp[1][0] = 0;
    InPromedComp[1][1] = 1;
    InPromedComp[1][2] = 2;
    InPromedComp[1][3] = 3;


    InPromedComp[2][0] = 0;
    InPromedComp[2][1] = 1;


    InPromedComp[3][0] = 0;
    InPromedComp[3][1] = 1;

    InPromedComp[4][0] = 0;
    InPromedComp[4][1] = 1;

    InPromedComp[5][0] = 0;
    InPromedComp[5][1] = 1;

    InPromedComp[6][0] = 0;
    InPromedComp[6][1] = 1;
  }
}

void->void pipeline blurxyProm() {

  add Source();
  //add Original(n, m);
  //add MultiTiling(n, m, ts);
  //add Promotion1(n, m, ts);
  add PromPartally(n, m, ts);
  add Drop();
  //add Output();
}

void->float filter Source()
{
  int cnt = 0;
  work push 1 {
    //push(4.13);
    push(cnt++);
  }
}

//basic filter for smoothing, only 1 level, consume n data and produce n-2 data
float->float filter OProcess(int n){
  float[n] input;
  float[n] data;
  
  work push n-2 pop n{
    for(int i = 0; i < n; i++)
      input[i] = pop();
    for(int i = 1; i < n-1; i++)
      data[i] = (input[i-1] + input[i] + input[i+1])/3;
    for(int i = 1; i < n-1; i++)
      push(data[i]);
  }
}

//Original bluxry, begin with n elements, m level, and will produce n-2m data. 
float->float pipeline Original(int n, int m){
  for(int i = 0; i < m; i++)
    add OProcess(n-2*i);
}


//ts = tile size
//generate input for naive tiling, redudnant produce the data for next filter
float->float filter MTSource(int n, int m, int ts){
  float[n+ts] input;
  init{
    //println((n-2*m)/ts*(2*m+ts));
  }
  work pop n push (n-2*m)/ts*(2*m+ts) {
    for(int i = 0; i < n; i++)
      input[i] = pop();
    for(int i = n; i < n+ts; i++)
      input[i] = 0;

    for(int i = 0; i < n - 2*m; i += ts){
      for(int j = 0; j < 2*m + ts; j++)
        push(input[i+j]);
    }
  }
}

//Naive tiling, with no promotion.
float->float pipeline MultiTiling(int n, int m, int ts){
  add MTSource(n, m, ts);
  for(int i = 0; i < m; i++)
    add OProcess(ts + 2*m - 2*i);
}

//promotion at each level, no trading off. 
float->float filter Prom1(int n, int m, int ts, int level){
  // 0:1st Iteration of 1st execution, 1: general case, 2: 1st iteration of other executions
  // case 0 can be replaced by prework
  int stat = 0; 
  
  float[ts+2+2*m] input;
  float[ts+2+2*m] data;
  work pop ts+2 push ts+2{
    int upper = ts+2;
    
    if(stat == 0){
      stat = 1;
      upper += (m-level)*2;
    }
    else if(stat == upstat+1){
      //pop();
      //pop();
      stat = 1;
      upper += (m-level)*2;
    }
    stat++;

    for(int i = 0; i < upper; i++)
      input[i] = pop();
    for(int i = 1; i < upper-1; i++)
      data[i] = (input[i-1] + input[i] + input[i+1])/3;
    for(int i = 1; i < upper-1; i++)
      push(data[i]);
    push(data[upper-3]);
    push(data[upper-2]);
  }
}

//For the first level, the input should be rearranged, parts of the input should be redundant
float->float filter InputProm1(int n, int m, int ts){
  float[n] data;
  work pop n push (n-2*m)/ts*(ts+2){ // -2: to keep IO rate consistency; real amount : n+(n-2*m)/ts*2-2
    int upper = ts+2*m;
    for(int i = 0; i < n; i++)
      data[i] = pop();
    for(int i = 0; i < upper; i++)
      push(data[i]);
    push(data[upper-2]);
    push(data[upper-1]);
    for(int i = upper; i < n; i += ts){
      for(int j = 0; j < ts; j++){
        push(data[i+j]);
      }
      if(i + ts == n) continue;
      push(data[i+ts-2]);
      push(data[i+ts-1]);
    }
  }
}

//optimial promotion.
float->float pipeline Promotion1(int n, int m, int ts){
  add InputProm1(n, m, ts);
  //add OutputPass();
  for(int level = 1; level < m; level++){
    add Prom1(n, m, ts, level);
  }
  add OProcess(ts+2);
}

float->void filter Drop(){
  work pop 1{
    pop();
  }
}

float->void filter Output()
{
  work pop 1 {
    float x = pop();
    println("Out : " + x);
  }
}

float->float filter OutputPass()
{
  work push 1 pop 1{
    float x = pop();
    println(x);
    push(x);
  }
}


//Bellow : not verify yet

//Prom2 is not promotion, it eliminate redundancy through output the data firstly computed
//It is an specific case of promotion, and optimal one.
float->float filter Prom2(int ts, int pos, int irate, int orate){
  float[ts] input;
  float[ts] output;
  float[ts] redundnat;
  int[ts] HasComputed;
  int[ts] OutputState;
  int ninput = 0;
  int stat = 0;

  init{
    for(int i = 0; i < ts; i++){
      HasComputed[i] = InPromedComp[pos][i];
      if(HasComputed[i] != UNREDUNDANT)
        ninput++;
    }

    int tmp = 0;
    for(int i = 0; i < ts; i++)
      OutputState[i] = UNREDUNDANT;
    for(int i = 0; i < ts; i++){
      if(InPromedComp[pos+1][i] != UNREDUNDANT){
        OutputState[ts-3-redcnt[pos+1]+i] = tmp++;
        //println("RED : " + pos + " " + (ts-3+i-redcnt[pos+1]) + " " + ts);
      }
    }
  }

  work pop ts+irate push ts-2+orate{

    //proceed input stat, which iteration it is. (the first, the first of a execution, others)
    if(stat == upstat+1) stat = 1;
    if(stat > 1){  //can be done through prework
      for(int i = 0; i < ninput; i++){
        redundnat[i] = pop();
        //if(pos==2) println("InputR : " + redundnat[i]);
      }
    }
    else stat = 1;
    
    for(int i = 0; i < ts; i++){
      input[i] = pop();
      //if(pos == 1) println("INPUT:" + input[i]);
    }

    //proceed output of this filter
    for(int i = 1; i < ts-1; i++){
      if(HasComputed[i] != UNREDUNDANT && stat != 1)
        output[i] = redundnat[HasComputed[i]];
      else
        output[i] = (input[i-1]+input[i]+input[i+1])/3;
    }

    //proceed redundant for next filter and its succeed iteration
    //push ts+ninput data
    for(int i = 1; i < ts-1; i++){
      push(output[i]);
      //if(pos==1) println(output[i]);
    }
    for(int i = 2; i < ts-2; i++){
      if(OutputState[i] != UNREDUNDANT){
        push(output[i]);
        //println("REDUN : " + output[i] + " " + i + " " + pos);
      }
    }
    stat++;
  }
}

float->float pipeline PromPartally(int n, int m, int ts){
  add MTSource(n, m, ts);
  for(int i = 0; i < m; i++){
    add Prom2(ts+2*m-2*i, i, IORate[i], IORate[i+1]);
  }
}