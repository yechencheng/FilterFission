void->void pipeline original{
	int n = 1<<10;
	add source(n);
	add s1(n);
	add s2(n)
}

void->int filter source(int n){
	work push n*n{
		for(int i = 0; i < n; i++)
			for(int j = 0; j < n; j++)
				push(j);
	}
}

int->void filter printer{
	work pop 1{
		//print(peek(0));
		pop();
	}
}

int->int filter s1(int n){
	work pop n push (n-2){
		for(int i = 1; i < n-1; i++){
			push( (peek(i-1)+peek(i)+peek(i+1))/3 );
		}
	}
}

int->int filter reorder1(int n){
	work pop n*(n-2) push n*(n-2){
		for(int i = 0; i < n; i++)
			for(int j = 0; j < n-2; j++)
				push（peek(i + j * n));
	}
}

int->int filter reorder2(int n){
	work pop (n-2)*(n-2) push (n-2)*(n-2){
		for(int i = 0; i < n-2; i++)
			for(int j = 0; j < n-2; j++)
				push（peek(i + j * (n-2)));
	}
}

int->int filter s2(int n){
	work pop n*(n-2) push (n-2)*(n-2){
		int[n][n] data;
		int[n][n] blury;
		for(int i = 0; i < n; i++)
			for(int j = 1; j < n-1; j++)
				data[i][j] = pop();
		for(int i = 1; i < n - 1; i++)
			for(int j = 1; j < n-1; j++)
				blury[i][j] = (blury[i-1][j] + blury[i][j] + blury[i+1][j])/3;
		for(int i = 1; i < n-1; i++)
			for(int j = 1; j < n-1; j++)
				push(blury[i][j]);
	}
}