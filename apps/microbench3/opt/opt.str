void->void pipeline opt{
	int n = (1<<11)+2;
	int m = 16;
	add source(n);
	add reassign(n, m);
	add s1(m);
	add s2(m);
	add printer();
}

void->int filter source(int n){
	work push n*n{
		for(int i = 0; i < n; i++)
			for(int j = 0; j < n; j++)
				push(j);
	}
}

int->int filter reassign(int n, int m){
	int k = (n-2)/m;
	work push k*k*(m+2)*(m+2) pop n*n{
		for(int i = 0; i < k; i++)
			for(int j = 0; j < k; j++){
				for(int ii = i*m; ii < i*m+m+2; ii++)
					for(int jj=j*m; jj < j*m+m+2; jj++)
						push(peek(ii * n + jj));
			}
		for(int i = 0; i < n; i++)
			for(int j = 0; j < n; j++)
				pop();
	}
}

int->void filter printer(){
	work pop 1{
		//print(peek(0));
		pop();
	}
}

int->int filter s1(int n){
	work pop n push (n-2){
		for(int i = 1; i < n-1; i++){
			push((peek(i-1)+peek(i)+peek(i+1))/3 );
		}
	}
}



int->int filter s2(int n){
	work pop n*(n-2) push (n-2)*(n-2){
		int[n][n] data;
		int[n][n] blury;
		for(int i = 0; i < n; i++)
			for(int j = 1; j < n-1; j++)
				data[i][j] = pop();

		for(int i = 1; i < n - 1; i++)
			for(int j = 1; j < n-1; j++)
				blury[i][j] = (blury[i-1][j] + blury[i][j] + blury[i+1][j])/3;
		for(int i = 1; i < n-1; i++)
			for(int j = 1; j < n-1; j++)
				push(blury[i][j]);
	}
}