/** 
 * This is a channel vocoder as described in 6.555 Lab 2.
 * It's salient features are a filterbank each of which
 * contains a decimator after a bandpass filter. 
 * 
 * Sampling Rate is 8000 Hz. 
 * First the signal is conditioned using a lowpass filter with
 * cutoff at 5000 Hz. Then the signal is "center clipped" which
 * basically means that very high and very low values are removed.
 *
 * Then, the signal is sent both to a pitch detector and to a 
 * filter bank with 200 Hz wide windows (18 overall)
 * 
 * Thus, each output is the combination of 18 band envelope values
 * from the filter bank and a single pitch detector value. This
 * value is either the pitch if the sound was voiced or 0 if the
 * sound was unvoiced.
 **/
void->void pipeline ChannelVocoder7 {
//    add DataSource();
    add FileReader<float>("../input/input");
    // low pass filter to filter out high freq noise
    add LowPassFilter(1, (2*pi*5000)/8000, 256); 
    add MainSplitjoin();
    //add FloatPrinter();
    add FileWriter<float>("ChannelVocoder7.out");
}

/** This class is just a wrapper so that we don't have anonymous inner classes. **/
float->float splitjoin MainSplitjoin {
  int PITCH_WINDOW = 100; // the number of samples to base the pitch detection on
  int DECIMATION   = 50; // decimation factor
  int NUM_FILTERS  = 16; //18;
  
  split duplicate;
  add PitchDetector(PITCH_WINDOW, DECIMATION);
  add VocoderFilterBank(NUM_FILTERS, DECIMATION);
  join roundrobin(1,16); // can't be NUM_FILTERS b/c const prop didn't work
}


/** a simple data source. **/
void->float filter DataSource() {
  int SIZE = 11;
  int index;
  float[SIZE] x;


  init {
    index = 0;
    x[0] = -0.70867825;
    x[1] = 0.9750938;
    x[2] = -0.009129746;
    x[3] = 0.28532153;
    x[4] = -0.42127264;
    x[5] = -0.95795095;
    x[6] = 0.68976873;
    x[7] = 0.99901736;
    x[8] = -0.8581795;
    x[9] = 0.9863592;
    x[10] = 0.909825;
  }

  
  work push 1 {
    push(x[index]);
    index = (index+1)%SIZE;
  }
}

/** 
 * Pitch detector.
 **/
float->float pipeline PitchDetector(int winsize, int decimation) {
  add CenterClip();
  add CorrPeak(winsize, decimation);
}




/** The channel vocoder filterbank. **/
float->float splitjoin VocoderFilterBank(int N, int decimation) {

  split duplicate;
  for (int i=0; i<N; i++) {
    add FilterDecimate(i, decimation);
  }
  join roundrobin;
}


/** 
 * A channel of the vocoder filter bank -- has a 
 * band pass filter centered at i*200 Hz followed
 * by a decimator with decimation rate of decimation.
 **/
float->float pipeline FilterDecimate(int i, int decimation) {
  //add VocoderBandPassFilter(i, 64); // 64 tap filter
  add BandPassFilter(2, 400*i, 400*(i+1), 64); 
  add Compressor(decimation);


}

/** 
 * This filter "center clips" the input value so that it is always
 * within the range of -.75 to .75
 **/
float->float filter CenterClip {
  float MIN = -0.75;
  float MAX =  0.75;
  work pop 1 push 1 {
    float t = pop();
    if (t<MIN) {
      push(MIN); 
    } else if (t>MAX) {
      push(MAX);
    } else {
      push(t);
    }
  }
}

/** 
 * This filter calculates the autocorrelation of the next winsize elements
 * and then chooses the max peak. If the max peak is under a threshold we
 * output a zero. If the max peak is above the threshold, we simply output 
 * its value.
 **/
float->float filter CorrPeak(int winsize, int decimation) {
  float THRESHOLD = 0.07;
  work peek winsize push 1 pop decimation {
    float[winsize] autocorr; // auto correlation
    for (int i=0; i<winsize; i++) {
      float sum = 0;
      for (int j=i; j<winsize; j++) {
	       sum += peek(i)*peek(j);
      }
      autocorr[i] = sum/winsize;
    }

    // armed with the auto correlation, find the max peak
    // in a real vocoder, we would restrict our attention to
    // the first few values of the auto corr to catch the initial peak
    // due to the fundamental frequency.
    float maxpeak = 0;
    for (int i=0; i<winsize; i++) {
      if (autocorr[i]>maxpeak) {
	maxpeak = autocorr[i];
      }
    }

    //println("max peak" + maxpeak);
    
    // output the max peak if it is above the threshold.
    // otherwise output zero;
    if (maxpeak > THRESHOLD) {
      push(maxpeak);
    } else {
      push(0);
    }
    for (int i=0; i<decimation; i++) {
      pop();
    }
  }
}	   
/**
 * A simple adder which takes in N items and
 * pushes out the sum of them.
 **/
float->float filter Adder(int N) {
  work pop N push 1 {
    float sum = 0;
    for (int i=0; i<N; i++) {
      sum += pop();
    }
    push(sum);
  }
}

/* This is a bandpass filter with the rather simple implementation of
 * a low pass filter cascaded with a high pass filter. The relevant parameters
 * are: end of stopband=ws and end of passband=wp, such that 0<=ws<=wp<=pi
 * gain of passband and size of window for both filters. Note that the high 
 * pass and low pass filters currently use a rectangular window.
 **/
float->float pipeline BandPassFilter(float gain, float ws, float wp, int numSamples) {
  add LowPassFilter(1, wp, numSamples);
  add HighPassFilter(gain, ws, numSamples);
}
/* This is a bandstop filter with the rather simple implementation of
 * a low pass filter cascaded with a high pass filter. The relevant parameters
 * are: end of passband=wp and end of stopband=ws, such that 0<=wp<=ws<=pi
 * gain of passband and size of window for both filters. Note that the high 
 * pass and low pass filters currently use a rectangular window.
 *
 * We take the signal, run both the low and high pass filter separately and then
 * add the results back together.
 **/
float->float pipeline BandStopFilter(float gain, float wp, float ws, int numSamples) {
  add splitjoin {
    split duplicate;
    add LowPassFilter(gain, wp, numSamples);
    add HighPassFilter(gain, ws, numSamples);
    join roundrobin;
  };
  /* sum the two outputs together. */
  add Adder(2); 
}
/**
 * This filter compresses the signal at its input by a factor M.
 * Eg it inputs M samples, and only outputs the first sample.
 **/
float->float filter PassF(){
  work pop 1 push 1{
    push(pop());
  }
}

float->void filter DropF(){
  work pop 1{
    pop();
  }
}

float->float splitjoin Compressor(int M){
  split roundrobin(1, M-1);
  add PassF();
  add DropF();
  join roundrobin(1, 0);
}
/*
float->float filter Compressor(int M) {
  work peek M pop M push 1 {
    push(pop());
    for (int i=0; i<(M-1); i++) {
      pop();
    }
  }
}
*/
/**
 * This filter expands the input by a factor L. Eg in takes in one
 * sample and outputs L samples. The first sample is the input
 * and the rest of the samples are zeros. 
 **/

void->float filter Gen0(){
  work push 1{
    push(0);
  }
}

float->float splitjoin Expander(int L) {
  split roundrobin(1);
  add PassF();
  add Gen0();
  join roundrobin(1, L-1);
}
/*
float->float filter Expander(int L) {
  work peek 1 pop 1 push L {
    push(pop());
    for (int i=0; i<(L-1); i++) {
      push(0);
    }
  }
}
*/

/**
 * Simple sink that just prints the data that is fed to it.
 **/
float->void filter FloatPrinter {
  work pop 1 {
    println(pop());
  }
}
/**
 * Simple StreamIt filter that simply absorbs floating 
 * point numbers without printing them. 
 **/
float->void filter FloatSink {
  work pop 1 {
    pop();
  }
}
/** 
 * Simple FIR high pass filter with gain=g, stopband ws(in radians) and N samples.
 *
 * Eg
 *                 ^ H(e^jw)
 *                 |
 *     --------    |    -------
 *     |      |    |    |     |
 *     |      |    |    |     |
 *    <-------------------------> w
 *                   pi-wc pi pi+wc
 *
 *
 * This implementation is a FIR filter is a rectangularly windowed sinc function 
 * (eg sin(x)/x) multiplied by e^(j*pi*n)=(-1)^n, which is the optimal FIR high pass filter in 
 * mean square error terms.
 *
 * Specifically, h[n] has N samples from n=0 to (N-1)
 * such that h[n] = (-1)^(n-N/2) * sin(cutoffFreq*pi*(n-N/2))/(pi*(n-N/2)).
 * where cutoffFreq is pi-ws
 * and the field h holds h[-n].
 */
float->float filter HighPassFilter(float g, float ws, int N) {
  float[N] h;

  /* since the impulse response is symmetric, I don't worry about reversing h[n]. */
  init {
    int OFFSET = N/2;
    float cutoffFreq = pi - ws;
    for (int i=0; i<N; i++) {
      int idx = i + 1;
      /* flip signs every other sample (done this way so that it gets array destroyed) */
      int sign = ((i%2) == 0) ? 1 : -1;
      // generate real part
      if (idx == OFFSET) 
	/* take care of div by 0 error (lim x->oo of sin(x)/x actually equals 1)*/
	h[i] = sign * g * cutoffFreq / pi; 
      else 
	h[i] = sign * g * sin(cutoffFreq * (idx-OFFSET)) / (pi*(idx-OFFSET));
    }

  }

  /* implement the FIR filtering operation as the convolution sum. */
  work peek N pop 1 push 1 {
    float sum = 0;
    for (int i=0; i<N; i++) { 
      sum += h[i]*peek(i);
    }
    push(sum);
    pop();
  }
}
/** 
 * Simple FIR low pass filter with gain=g, wc=cutoffFreq(in radians) and N samples.
 * Eg:
 *                 ^ H(e^jw)
 *                 |
 *          ---------------
 *          |      |      |
 *          |      |      |
 *    <-------------------------> w
 *         -wc            wc
 *
 * This implementation is a FIR filter is a rectangularly windowed sinc function 
 * (eg sin(x)/x), which is the optimal FIR low pass filter in 
 * mean square error terms.
 *
 * Specifically, h[n] has N samples from n=0 to (N-1)
 * such that h[n] = sin(cutoffFreq*pi*(n-N/2))/(pi*(n-N/2)).
 * and the field h holds h[-n].
 */
float->float filter LowPassFilter(float g, float cutoffFreq, int N) {
  float[N] h;

  /* since the impulse response is symmetric, I don't worry about reversing h[n]. */
  init {
    int OFFSET = N/2;
    for (int i=0; i<N; i++) {
      int idx = i + 1;
      // generate real part
      if (idx == OFFSET) 
	/* take care of div by 0 error (lim x->oo of sin(x)/x actually equals 1)*/
	h[i] = g * cutoffFreq / pi; 
      else 
	h[i] = g * sin(cutoffFreq * (idx-OFFSET)) / (pi*(idx-OFFSET));
    }
  }

  /* Implement the FIR filtering operation as the convolution sum. */
  work peek N pop 1 push 1 {
    float sum = 0;
    for (int i=0; i<N; i++) { 
      sum += h[i]*peek(i);
    }
    push(sum);
    pop();
  }
}
